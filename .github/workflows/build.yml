name: Build

on:
  push:
    branches:
      - "*"
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      runner_label:
        description: Label of the runner to execute the job
        required: true
        default: raspberrypi5-production
        type: string
      board_target:
        description: Target board for the build
        required: false
        default: esp32s3_devkitc/esp32s3/procpu
        type: string
      device_serial:
        description: Serial device for connecting target board
        required: false
        default: /dev/ttyUSB0
        type: string
      test_tag:
        description: Test TAGs to filter tests
        required: false
        default: ""
        type: string
      pytest_args:
        description: Arguments to the pytest subprocess (extend YAML config)
        required: false
        default: ""
        type: string
      test_scenario:
        description: Test suite scenario to run
        required: false
        default: ""
        type: string
      tests_target:
        description: Tests scope to run
        required: false
        default: app/repo
        type: choice
        # Options with a space, parentheses don't work!
        options:
          - "app/repo"
          - "app/integration"
          - "app/unit/dut"
          - "app/unit/host"
          - "app/robot"
          - "zephyr_all_tests"
    
env:
  RUNNER_LABEL: raspberrypi5-production
  BOARD_TARGET: esp32s3_devkitc/esp32s3/procpu
  DEVICE_SERIAL: /dev/ttyUSB0
  TESTS_TARGET: "app/repo"
  TEST_TAG: N/A
  PYTEST_ARGS: N/A
  TEST_SCENARIO: N/A
  # Pass all secrets as json to pytest
  SECRETS_JSON: ${{ toJSON(secrets) }}

jobs:  
  process-runner:
    name: Get runner label to execute the workflow
    runs-on: ubuntu-24.04
    outputs:
      label: ${{ steps.runner-label.outputs.label }}
      uid: ${{ steps.runner-label.outputs.uid }}
      gid: ${{ steps.runner-label.outputs.gid }}
    steps:
      - name: Read runner label
        id: runner-label
        run: |
            echo "RUNNER_LABEL=${INPUT_RUNNER_LABEL:-$RUNNER_LABEL}" >> $GITHUB_ENV
            echo "label=${INPUT_RUNNER_LABEL:-$RUNNER_LABEL}" >> $GITHUB_OUTPUT
            echo "uid=$(id -u)" >> $GITHUB_OUTPUT
            echo "gid=$(id -g)" >> $GITHUB_OUTPUT
        env:
          INPUT_RUNNER_LABEL: ${{ github.event.inputs.runner_label }}

  process-image:
    name: Set workflows docker image
    needs: process-runner
    runs-on: ${{ needs.process-runner.outputs.label }}
    outputs:
      image: ${{ steps.container-arch.outputs.image }}
    # Set container name based on runner architecture  
    steps:
      - name: Set container based on runner architecture
        id: container-arch
        shell: bash
        run: |
            echo "Detected runner architecture: $RUNNER_ARCH"
            if [[ $RUNNER_ARCH == 'ARM64' ]]; then
            echo "Set container name to fit the runner arch: zephyrprojectrtos/ci:v0.28.4-arm64"
            echo "image=zephyrprojectrtos/ci:v0.28.4-arm64" >> $GITHUB_OUTPUT
            fi
            if [[ $RUNNER_ARCH == 'X64' ]]; then
            echo "Set container name to fit the runner arch: zephyrprojectrtos/ci:v0.28.4-amd64"
            echo "image=zephyrprojectrtos/ci:v0.28.4-amd64" >> $GITHUB_OUTPUT
            fi

  build:
    name: Build and Test
    needs: [process-image, process-runner]
    runs-on: ${{ needs.process-runner.outputs.label }}
    outputs:
      test_type: ${{ env.TESTS_TARGET }}
    defaults:
      run:
        working-directory: customer-application
    container:
      image: ${{ needs.process-image.outputs.image }}
      options: >
        --device=/dev/ttyUSB0 
        --privileged  
        -v /var/run/dbus:/var/run/dbus 
        -v /run/dbus:/run/dbus 
        -v /dev:/dev 
        -e DBUS_SESSION_BUS_ADDRESS=unix:path=/run/dbus/system_bus_socket 
        --user ${{ needs.process-runner.outputs.uid }}:${{ needs.process-runner.outputs.gid }}
    env:
      CMAKE_PREFIX_PATH: /opt/toolchains
    steps:
      - name: Clean up workspace
        run: |
            sudo chown -R $(id -u):$(id -g) ${{ github.workspace }}
            sudo find ${{ github.workspace }} -mindepth 1 -delete

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: customer-application

      - name: Set build env variables
        run: |
            echo "RUNNER_LABEL=${INPUT_RUNNER_LABEL:-$RUNNER_LABEL}" >> $GITHUB_ENV
            echo "BOARD_TARGET=${INPUT_BOARD_TARGET:-$BOARD_TARGET}" >> $GITHUB_ENV
            echo "DEVICE_SERIAL=${INPUT_DEVICE_SERIAL:-$DEVICE_SERIAL}" >> $GITHUB_ENV
            echo "TESTS_TARGET=${INPUT_TESTS_TARGET:-$TESTS_TARGET}" >> $GITHUB_ENV
            echo "TEST_TAG=${INPUT_TEST_TAG:-$TEST_TAG}" >> $GITHUB_ENV
            echo "PYTEST_ARGS=${INPUT_PYTEST_ARGS:-$PYTEST_ARGS}" >> $GITHUB_ENV
            echo "TEST_SCENARIO=${INPUT_TEST_SCENARIO:-$TEST_SCENARIO}" >> $GITHUB_ENV
        env:
          INPUT_RUNNER_LABEL: ${{ github.event.inputs.runner_label }}
          INPUT_BOARD_TARGET: ${{ github.event.inputs.board_target }}
          INPUT_DEVICE_SERIAL: ${{ github.event.inputs.device_serial }}
          INPUT_TESTS_TARGET: ${{ github.event.inputs.tests_target }}
          INPUT_TEST_TAG: ${{ github.event.inputs.test_tag }}
          INPUT_PYTEST_ARGS: ${{ github.event.inputs.pytest_args }}
          INPUT_TEST_SCENARIO: ${{ github.event.inputs.test_scenario }}
      
      # Initiate Zephyr environment
      - name: Initialize
        shell: bash
        run: |
            docker run --rm -it zephyrprojectrtos/ci:v0.28.4-arm64 bash
            echo "Checking out Zephyr env..."
            pwd
            echo "Current github workspace:"
            ls -la
            echo "Parent github folder"
            ls -la ..
            rm -rf ../.west
            west init -l .
            west update -o=--depth=1 -n
            west blobs fetch hal_espressif
            
      # Install lib extras for testing
      - name: Install lib extras
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get install -y iperf
            sudo apt-get install -y sysbench fio

      # Install Python extras for testing
      - name: Install Python extra packages
        shell: bash
        run: |
            pip install -r requirements-extras.txt

      # Generate tests paths to run with twister command
      - name: Create test list with tests scope
        shell: bash
        # No test scenario is filtered
        if : ${{ env.TEST_SCENARIO == 'N/A' || '' }} 
        run: python .github/scripts/get_tests_list.py --tests_scope ${{ env.TESTS_TARGET }}

      - name: Create test list with test scenario
        shell: bash
        # Specific test scenario is filtered
        if : ${{ env.TEST_SCENARIO != 'N/A' || '' }} 
        run: python .github/scripts/get_tests_list.py --tests_scenario ${{ env.TESTS_TARGET }} 
        
      - name: Create test list with robot tests
        shell: bash
        # Specific test scenario is filtered
        if : ${{ env.TESTS_TARGET == 'app/robot' }} 
        run: python .github/scripts/get_tests_list.py --tests_robot ${{ env.TESTS_TARGET }} 

      # Pass secrets into json file
      - name: Create json file with secrets variables
        shell: bash
        run: |
            echo $SECRETS_JSON > vars.json
            cat vars.json

      # Put list of testcases into output variable for shell script usage
      - name: Get tests list
        shell: python
        id: py-script
        run: |
            import os
            import re
            regex = re.compile('.*_tests.txt')
            for dir in os.listdir('.'):
                if regex.match(dir):
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                    f.write(f'test_list={os.path.join(dir)}\n')

      # Example for custom application build
      - name: Build app for ${{ env.BOARD_TARGET }}
        shell: bash
        run: west build -p always -b ${{ env.BOARD_TARGET }} app-esp32/blinky
        
      - name: Flash
        shell: bash
        run: west flash

      # Twister tests section
      - name: Twister tests
        shell: bash
        run: |
            python .github/scripts/run_tests.py --platform ${{ env.BOARD_TARGET }} \
            --device_serial ${{ env.DEVICE_SERIAL }} \
            --tag ${{ env.TEST_TAG }} \
            --pytest_args ${{ env.PYTEST_ARGS }} \
            --scenario ${{ env.TEST_SCENARIO }} \
            --test_list ${{steps.py-script.outputs.test_list}} \
            --target ${{ env.TESTS_TARGET }}

      # Archive all test artifacts except robot tests
      - name: Single test artifacts
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: ${{ env.TESTS_TARGET != 'app/robot' }} 
        with:
          name: single_test_artifacts
          # Relative path to project root. 
          path: |
            customer-application/twister-out*/*
          include-hidden-files: true
          if-no-files-found: error
          retention-days: 5

      # Archive robot tests artifacts
      - name: Single test artifacts
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: ${{ env.TESTS_TARGET == 'app/robot' }} 
        with:
          name: single_test_artifacts
          # Relative path to project root. 
          path: |
            customer-application/output.xml
            customer-application/log.html
            customer-application/report.html
          if-no-files-found: error
          retention-days: 5
      
      # Prepare test summary report folder
      - name: Prepare CI report summary
        shell: bash
        if : ${{ env.TESTS_TARGET != 'app/robot' }} 
        run: |
            rm -rf test-summary
            sudo mkdir -p test-summary

      # Collect all test summary reports into one folder
      - name: Copy files to CI report summary
        shell: python
        if : ${{ env.TESTS_TARGET != 'app/robot' }} 
        run: |
            import os
            import re
            import shutil
            regex = re.compile('twister-out.*')
            for dir in os.listdir('.'):
              if regex.match(dir):
                print(f"Found: {dir}")
                shutil.copyfile(os.path.join(dir, "twister_suite_report.xml"), \
                os.path.join("test-summary", \
                f"twister_suite_report{dir.split('-out')[1]}.xml"))

      # Archive test summary report
      - name: Archive test summary artifacts
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: ${{ env.TESTS_TARGET != 'app/robot' }} 
        with:
          name: summary_test_artifacts
          # Relative path to project root. 
          path: |
            customer-application/test-summary
          if-no-files-found: error
          retention-days: 5


  publish_test_summaries:
    name: Publish Test Summaries
    if: ${{ needs.build.outputs.test_type != 'app/robot' }}
    needs: build
    uses: ./.github/workflows/reports-summary-publish.yml
