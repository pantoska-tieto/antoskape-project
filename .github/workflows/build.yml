name: Build

on:
  push:
    branches:
      - "*"
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      runner_label:
        description: Label of the runner to execute the job
        required: true
        default: raspberrypi5-production
        type: string
      board_target:
        description: Target board for the build
        required: false
        default: esp32s3_devkitc/esp32s3/procpu
        type: string
      device_serial:
        description: Serial device for connecting target board
        required: false
        default: /dev/ttyUSB0
        type: string
      test_tag:
        description: Test TAGs to filter tests
        required: false
        default: ""
        type: string
      pytest_args:
        description: Arguments to the pytest subprocess (extend YAML config)
        required: false
        default: ""
        type: string
      test_scenario:
        description: Test suite scenario to run
        required: false
        default: ""
        type: string
      run_tests:
        description: Start testing
        required: true
        default: "Run tests"
        type: choice
        # Options with a space, parentheses don't work!
        options:
          - "Run tests"
          - "Without testing"
      tests_target:
        description: Tests scope to run
        required: false
        default: app/repo
        type: choice
        # Options with a space, parentheses don't work!
        options:
          - "app/repo"
          - "app/integration"
          - "app/unit/dut"
          - "app/unit/host"
          - "app/robot"
          - "zephyr_all_tests"
    
env:
  RUNNER_LABEL: raspberrypi5-production
  BOARD_TARGET: esp32s3_devkitc/esp32s3/procpu
  DEVICE_SERIAL: /dev/ttyUSB0
  TESTS_TARGET: "app/repo"
  TEST_TAG: N/A
  PYTEST_ARGS: N/A
  TEST_SCENARIO: N/A
  RUN_TESTS: "Run tests"
  # Pass all secrets as json to jobs
  SECRETS_JSON: ${{ toJSON(secrets) }}

jobs:  
  process-runner:
    name: Get runner label to execute the workflow
    runs-on: ubuntu-24.04
    outputs:
      label: ${{ env.RUNNER_LABEL }}
    steps:
      - name: Read runner label
        id: runner-label
        run: |
            echo "RUNNER_LABEL=${INPUT_RUNNER_LABEL:-$RUNNER_LABEL}" >> $GITHUB_ENV
        env:
          INPUT_RUNNER_LABEL: ${{ github.event.inputs.runner_label }}

  process-image:
    name: Set workflows docker image
    needs: process-runner
    runs-on: ${{ needs.process-runner.outputs.label }}
    outputs:
      image: ${{ steps.container-arch.outputs.image }}
    # Set container name based on runner architecture  
    steps:
      - name: Set container based on runner architecture
        id: container-arch
        shell: bash
        run: |
            echo "Detected runner architecture: $RUNNER_ARCH"
            if [[ $RUNNER_ARCH == 'ARM64' ]]; then
            echo "Set container name to fit the runner arch: zephyrprojectrtos/ci:v0.28.4-arm64"
            echo "image=zephyrprojectrtos/ci:v0.28.4-arm64" >> $GITHUB_OUTPUT
            fi
            if [[ $RUNNER_ARCH == 'X64' ]]; then
            echo "Set container name to fit the runner arch: zephyrprojectrtos/ci:v0.28.4-amd64"
            echo "image=zephyrprojectrtos/ci:v0.28.4-amd64" >> $GITHUB_OUTPUT
            fi

  build:
    name: Build Zephyr workspace
    needs: [process-image, process-runner]
    runs-on: ${{ needs.process-runner.outputs.label }}
    outputs:
      test_type: ${{ env.TESTS_TARGET }}
      testing: ${{ env.RUN_TESTS }}
      board_target: ${{ env.BOARD_TARGET }}
      device_serial: ${{ env.DEVICE_SERIAL }}
      test_tag: ${{ env.TEST_TAG }}
      pytest_args: ${{ env.PYTEST_ARGS }}
      test_scenario: ${{ env.TEST_SCENARIO }}
      tests_target: ${{ env.TESTS_TARGET }}
    defaults:
      run:
        working-directory: customer-application
    container:
      image: ${{ needs.process-image.outputs.image }}
      options: >
        --device=/dev/ttyUSB0 
        --privileged  
        -v /var/run/dbus:/var/run/dbus 
        -v /run/dbus:/run/dbus 
        -v /dev:/dev 
        -e DBUS_SESSION_BUS_ADDRESS=unix:path=/run/dbus/system_bus_socket
    env:
      CMAKE_PREFIX_PATH: /opt/toolchains
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: customer-application

      - name: Set build env variables
        run: |
            echo "RUNNER_LABEL=${INPUT_RUNNER_LABEL:-$RUNNER_LABEL}" >> $GITHUB_ENV
            echo "BOARD_TARGET=${INPUT_BOARD_TARGET:-$BOARD_TARGET}" >> $GITHUB_ENV
            echo "DEVICE_SERIAL=${INPUT_DEVICE_SERIAL:-$DEVICE_SERIAL}" >> $GITHUB_ENV
            echo "TESTS_TARGET=${INPUT_TESTS_TARGET:-$TESTS_TARGET}" >> $GITHUB_ENV
            echo "TEST_TAG=${INPUT_TEST_TAG:-$TEST_TAG}" >> $GITHUB_ENV
            echo "PYTEST_ARGS=${INPUT_PYTEST_ARGS:-$PYTEST_ARGS}" >> $GITHUB_ENV
            echo "TEST_SCENARIO=${INPUT_TEST_SCENARIO:-$TEST_SCENARIO}" >> $GITHUB_ENV
            echo "RUN_TESTS=${INPUT_RUN_TESTS:-$RUN_TESTS}" >> $GITHUB_ENV
        env:
          INPUT_RUNNER_LABEL: ${{ github.event.inputs.runner_label }}
          INPUT_BOARD_TARGET: ${{ github.event.inputs.board_target }}
          INPUT_DEVICE_SERIAL: ${{ github.event.inputs.device_serial }}
          INPUT_TESTS_TARGET: ${{ github.event.inputs.tests_target }}
          INPUT_TEST_TAG: ${{ github.event.inputs.test_tag }}
          INPUT_PYTEST_ARGS: ${{ github.event.inputs.pytest_args }}
          INPUT_TEST_SCENARIO: ${{ github.event.inputs.test_scenario }}
          INPUT_RUN_TESTS: ${{ github.event.inputs.run_tests }}
      
      # Initiate Zephyr environment
      - name: Initialize
        shell: bash
        run: |
            echo "Checking out Zephyr env..."
            pwd
            echo "Current github workspace:"
            ls -la
            echo "Parent github folder"
            ls -la ..
            rm -rf ../.west
            west init -l .
            west update -o=--depth=1 -n
            west blobs fetch hal_espressif
            
      # Install lib extras for testing
      - name: Install lib extras
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get install -y iperf
            sudo apt-get install -y sysbench fio

      # Install Python extras for testing
      - name: Install Python extra packages
        shell: bash
        run: |
            pip install -r requirements-extras.txt

      # Example for custom application build
      - name: Build app for ${{ env.BOARD_TARGET }}
        shell: bash
        run: west build -p always -b ${{ env.BOARD_TARGET }} app-esp32/blinky
        
      - name: Flash
        shell: bash
        run: west flash

  start_testing:
    name: Trigger test framework
    if: ${{ needs.build.outputs.testing == 'Run tests' }}
    needs: [process-runner, process-image, build] 
    uses: ./.github/workflows/testing.yml
    with:
      docker_image: ${{ needs.process-image.outputs.image }}
      runner_label: ${{ needs.process-runner.outputs.label }}
      board_target: ${{ needs.build.outputs.board_target }}
      device_serial: ${{ needs.build.outputs.device_serial }}
      test_tag: ${{ needs.build.outputs.test_tag }}
      pytest_args: ${{ needs.build.outputs.pytest_args }}
      test_scenario: ${{ needs.build.outputs.test_scenario }}
      tests_target: ${{ needs.build.outputs.tests_target }}
    secrets: inherit
