name: Build

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      runner_label:
        description: Label of the runner to execute the job
        required: false
        default: self-hosted
        type: string
      board_target:
        description: Target board for the build
        required: false
        default: esp32s3_devkitc/esp32s3/procpu
        type: string
      device_serial:
        description: Serial device for connecting target board
        required: false
        default: /dev/ttyUSB0
        type: string
      tests_target:
        description: Tests scope to run
        required: false
        default: repo
        type: choice
        options:
          - repo
          - integration
          - unit
    
env:
  RUNNER_LABEL: self-hosted
  BOARD_TARGET: esp32s3_devkitc/esp32s3/procpu
  DEVICE_SERIAL: /dev/ttyUSB0
  TESTS_TARGET: repo

jobs:
  process-runner:
    name: Get workflows runner 
    runs-on: self-hosted
    outputs:
      label: ${{ steps.runner-label.outputs.label }}
    # Set runner if no workflow_dispatch value is invoked  
    steps:
      - name: Set runner label
        id: runner-label
        run: echo "label=${INPUT_RUNNER_LABEL:-$RUNNER_LABEL}" >> $GITHUB_OUTPUT
        env:
          INPUT_RUNNER_LABEL: ${{ github.event.inputs.runner_label }}

  build:
    name: Build and Test
    needs: process-runner
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        sample: [blinky]
        target: [esp32s3_devkitc/esp32s3/procpu]
    runs-on: ${{ needs.process-runner.outputs.label }}
    defaults:
      run:
        working-directory: customer-application
    container:
      image: zephyrprojectrtos/ci:main-arm64
      options: --device=/dev/ttyUSB0
    env:
      CMAKE_PREFIX_PATH: /opt/toolchains
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: customer-application

      - name: Set build env variables
        run: |
            echo "RUNNER_LABEL=${INPUT_RUNNER_LABEL:-$RUNNER_LABEL}" >> $GITHUB_ENV
            echo "BOARD_TARGET=${INPUT_BOARD_TARGET:-$BOARD_TARGET}" >> $GITHUB_ENV
            echo "DEVICE_SERIAL=${INPUT_DEVICE_SERIAL:-$DEVICE_SERIAL}" >> $GITHUB_ENV
            echo "TESTS_TARGET=${INPUT_TESTS_TARGET:-$TESTS_TARGET}" >> $GITHUB_ENV
        env:
          INPUT_RUNNER_LABEL: ${{ github.event.inputs.runner_label }}
          INPUT_BOARD_TARGET: ${{ github.event.inputs.board_target }}
          INPUT_DEVICE_SERIAL: ${{ github.event.inputs.device_serial }}
          INPUT_TESTS_TARGET: ${{ github.event.inputs.tests_target }}
      
      - name: Initialize
        shell: bash
        run: |
            echo "Checking out Zephyr env..."
            pwd
            echo "Current github workspace:"
            ls -la
            echo "Parent github folder"
            ls -la ..
            rm -rf ../.west
            west init -l .
            west update -o=--depth=1 -n

      - name: Create text file with tests scope
        shell: bash
        run: python .github/scripts/get_tests_list.py --tests_scope ${{ env.TESTS_TARGET }} 

      - name: Get tests list
        shell: python
        id: py-script
        run: |
            import os
            import re
            regex = re.compile('.*_tests.txt')
            for dir in os.listdir('.'):
                if regex.match(dir):
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                    f.write(f'test_list={os.path.join(dir)}\n')

      # Example for custom application build
      - name: Build ${{ matrix.sample }} for ${{ matrix.target }}
        shell: bash
        run: west build -p always -b ${{ matrix.target }} app-esp32/${{ matrix.sample }}
        
      - name: Flash
        shell: bash
        run: west flash

      # Twister tests section
      - name: Make script executable
        run: chmod +x .github/scripts/get_tests_list.sh
        shell: bash

      - name: Twister tests
        shell: bash
        run: |
            PLATFORM=${{ env.BOARD_TARGET }} DEVICE_SERIAL=${{ env.DEVICE_SERIAL }} .github/scripts/get_tests_list.sh "${{steps.py-script.outputs.test_list}}"

      - name: Single test artifacts
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: ${{ always() }}
        with:
          name: single_test_artifacts
          # Relative path to project root. 
          path: |
            customer-application/twister-out*/*
          include-hidden-files: true
          if-no-files-found: error
          retention-days: 5
      
      - name: Prepare CI report summary
        shell: bash
        if : ${{ always() }}
        run: |
            rm -rf test-summary
            sudo mkdir -p test-summary

      # Collect all test summary reports
      - name: Copy files to CI report summary
        shell: python
        if : ${{ always() }}
        run: |
            import os
            import re
            import shutil
            regex = re.compile('twister-out.*')
            for dir in os.listdir('.'):
              if regex.match(dir):
                print(f"Found: {dir}")
                shutil.copyfile(os.path.join(dir, "twister_suite_report.xml"), os.path.join("test-summary", f"twister_suite_report{dir.split('-out')[1]}.xml"))

      - name: Archive test summary artifacts
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: ${{ always() }}
        with:
          name: summary_test_artifacts
          # Relative path to project root. 
          path: |
            customer-application/test-summary
          if-no-files-found: error
          retention-days: 5

  publish_test_summaries:
    name: Publish Test Summaries
    if: ${{ always() }}
    needs: build
    uses: ./.github/workflows/reports-summary-publish.yml
