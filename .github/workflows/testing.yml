name: Testing

on:
  workflow_call:
    inputs:
      docker_image:
        description: Docker image to use in tests
        required: true
        type: string
      runner_label:
        description: Label of the runner specified in Build workflow
        required: true
        type: string
      board_target:
        description: Target board for the build
        required: true
        type: string
      test_hardware:
        description: Tests target
        required: true
        type: string
      test_tag:
        description: Test TAGs to filter tests
        required: false
        type: string
      pytest_args:
        description: Arguments to the pytest subprocess (extend YAML config)
        required: false
        type: string
      test_scenario:
        description: Test suite scenario to run
        required: false
        type: string
      tests_target:
        description: Tests scope to run
        required: true
        default: app/repo/shell
        type: string
      integration_tests:
        description: Condition to run integration tests only
        required: false
        type: string

env:
  # Pass all secrets as json to jobs
  SECRETS_JSON: ${{ toJSON(secrets) }}

jobs:
  testing:
    name: Start testing
    runs-on: ${{ inputs.runner_label }}
    outputs:
      test_type: ${{ inputs.tests_target }}
      label: ${{ inputs.runner_label }}
    defaults:
      run:
        working-directory: customer-application
    container:
      image: ${{ inputs.docker_image }}
      options: >
        --device=/dev/ttyUSB0
        --privileged
        --cap-add=NET_ADMIN
        --cap-add=SYS_ADMIN
        -v /var/run/dbus:/var/run/dbus 
        -v /run/dbus:/run/dbus 
        -v /dev:/dev
        -v /etc/udev/rules.d:/etc/udev/rules.d
        -v /sys/class/bluetooth:/sys/class/bluetooth
        -v /var/lib/bluetooth:/var/lib/bluetooth
        -v /lib/modules:/lib/modules
        -v /usr/src:/usr/src
        -e DBUS_SESSION_BUS_ADDRESS=unix:path=/run/dbus/system_bus_socket
    env:
      CMAKE_PREFIX_PATH: /opt/toolchains
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: customer-application
      
      # Initiate Zephyr environment
      - name: Initialize
        shell: bash
        run: |
            echo "Checking out Zephyr env..."
            pwd
            echo "Current github workspace:"
            ls -la
            echo "Parent github folder"
            ls -la ..
            rm -rf ../.west
            west init -l .
            west update -o=--depth=1 -n
            west blobs fetch hal_espressif
            
      # Install lib extras for testing
      - name: Install lib extras
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get install -y iperf
            sudo apt-get install -y sysbench fio
            sudo apt-get install -y curl
            sudo apt-get install -y udev            
            sudo apt-get install -y python3-dev
            sudo apt-get install -y libgpiod-dev gpiod
            sudo apt-get install -y golang-go
            sudo apt-get install -y bluez bluez-tools libbluetooth-dev dbus

      # Install Python extras for testing
      - name: Install Python extra packages
        shell: bash
        run: |
            pip install -r requirements-extras.txt

      # Setup Bluetooth HCI socket
      - name: Setup for BT HCI socket
        shell: bash
        run: |
          echo "Checking if systemctl is available..."
          if command -v systemctl &> /dev/null; then
              echo "Using systemctl to manage dbus and bluetoothd"

              echo "Restarting dbus-daemon..."
              sudo systemctl restart dbus

              echo "Waiting for dbus to become responsive..."
              for i in {1..5}; do
                  if dbus-send --system --type=method_call --dest=org.freedesktop.DBus \
                      /org/freedesktop/DBus org.freedesktop.DBus.ListNames &> /dev/null; then
                      echo "dbus-daemon is now responsive"
                      break
                  fi
                  echo "DBus not ready yet, retrying in 1s..."
                  sleep 1
              done

              echo "Starting bluetoothd via systemctl..."
              sudo systemctl start bluetooth
          else
              echo "systemctl not available, falling back to manual dbus-daemon control"

              echo "Checking dbus-daemon status..."
              if ! dbus-send --system --type=method_call --dest=org.freedesktop.DBus \
                  /org/freedesktop/DBus org.freedesktop.DBus.ListNames &> /dev/null; then
                  echo "dbus-daemon not responding, attempting restart"
                  sudo pkill dbus-daemon || true
                  sleep 1
                  sudo rm -f /run/dbus/pid || echo "Could not remove /run/dbus/pid, might be locked"
                  sudo dbus-daemon --system --fork
              fi

              echo "Waiting for dbus-daemon to become responsive..."
              for i in {1..5}; do
                  if dbus-send --system --type=method_call --dest=org.freedesktop.DBus \
                      /org/freedesktop/DBus org.freedesktop.DBus.ListNames &> /dev/null; then
                      echo "dbus-daemon is now responsive"
                      break
                  fi
                  echo "DBus not ready yet, retrying in 1s..."
                  sleep 1
              done

              echo "Starting bluetoothd manually..."
              sudo bluetoothd
          fi

# Show HCI status
sudo hciconfig
            sudo hciconfig

      # Setup for tools
      - name: Setup for test tools
        shell: bash
        run: |
            go install github.com/apache/mynewt-mcumgr-cli/mcumgr@latest
            echo "Home dir:" $HOME
            sudo ls -la $HOME/go/bin
            sudo setcap cap_net_raw,cap_net_admin+eip $HOME/go/bin/mcumgr
            getcap $HOME/go/bin/mcumgr || echo "No mcumgr capabilities set"