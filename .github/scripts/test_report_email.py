import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from pathlib import Path
import os
import yaml
import argparse

# Email attributes setup
port = 587
smtp_server = "smtp.gmail.com"
login = "pant.system@gmail.com" # paste your login generated by Mailtrap

sender_email = "pant.system@gmail.com"
message = MIMEMultipart("alternative")
message["Subject"] = "Zephyr Test Summary Report"
message["From"] = sender_email

test_report = "twister_test_report.html"
emails_file = "CODEOWNERS.yaml"
# Substitute text message if html not supported in email system
text = """\
Hello,
the GitHub Zephyr build & testing was triggered in repo:
https://github.com/pantoska-tieto/antoskape-project/
Check the latest Action to find the tests summary report."""

def define_args():
    """Define CLI arguments set
    Returns: parser object with arguments
    """
    parser = argparse.ArgumentParser(
        description=(
            "Script to get python arguments"
        )
    )

    parser.add_argument(
        "--server_pwd",
        required=False,
        default=None,
        help="Email server credentials",
    )
    return parser

def parse_yaml(emails):
    """Parse YAML files to get the list of receiver email(s)

    :param: string emails: YAML file name with list of emails
    :return: string receiver: string with emails (comma delimiter)
    """
    with open(emails, "r") as f:
        res = yaml.safe_load(f)
        _e = res["codeowners"]["admin"]
        receiver = ",".join(_e["emails"])
        return receiver

if __name__ == "__main__":
    parser = define_args()
    args = parser.parse_args()
    # Setup workspace folder
    _p = Path(os.path.abspath(__file__)).parents[2]
    os.chdir(os.path.join(_p))

    with open(test_report, "r", encoding="utf-8") as f:
        html_code = f.read()
        f.close()

    # Convert both parts to MIMEText objects and add them to the MIMEMultipart message
    part1 = MIMEText(text, "plain")
    part2 = MIMEText(html_code, "html")
    message.attach(part1)
    message.attach(part2)
    # Get list of receiver email(s)
    receiver_email = parse_yaml(emails_file)
    message["To"] = receiver_email

    # Send email
    with smtplib.SMTP(smtp_server, port) as server:
        server.starttls()
        server.login(login, args.server_pwd)
        server.sendmail(sender_email, receiver_email, message.as_string())

print("Tests summary report email was sent.")